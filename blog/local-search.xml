<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Content-Type的几种常见格式</title>
    <link href="/blog/2023/07/08/Content-Type%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A0%BC%E5%BC%8F/"/>
    <url>/blog/2023/07/08/Content-Type%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>当发送HTTP请求时，可以通过设置请求头的Content-type字段来指定请求体的类型。Content-type字段用于说明请求体的媒体类型（Media Type）或数据格式。</p><p>以下是常见的Content-type值及其代表的含义：</p><ol><li>application&#x2F;x-www-form-urlencoded：<br>  该值表示表单数据以URL编码的形式进行传输。这是HTML表单的默认提交方式。在发送POST请求时，表单数据会被编码成键值对，然后与URL一起发送。<strong>这里只允许发送字段，不允许发送文件。</strong></li><li>multipart&#x2F;form-data：<br>  该值适用于在HTTP请求中传输包含二进制文件的表单数据（例如文件上传）。数据会被分割成多个部分，每个部分都有自己的Content-type头。<strong>这里可以用来上传图片用。</strong>不能用传统的req.body来接受，要不然为空对象{}，可以用第三方中间件，比如<strong>formidable、multer</strong>进行解析。</li><li>application&#x2F;json：<br>  该值表示请求体中包含JSON格式的数据。JSON是一种常用的数据交换格式，广泛用于前后端之间的数据传输。</li><li>text&#x2F;plain：<br>  该值表示请求体中包含纯文本内容，没有任何特殊格式。</li><li>application&#x2F;xml：<br>  该值表示请求体中包含XML格式的数据。XML是一种标记语言，常用于传输和存储结构化数据。</li><li>application&#x2F;octet-stream：<br>  该值表示请求体中包含二进制数据，通常用于上传文件或传输其他二进制内容。</li><li>image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif等：<br>  这些值表示请求体中包含相应格式的图像文件。</li></ol><p>通过设置合适的Content-type值，可以确保服务器能正确解析请求体的数据格式。同时，服务端也会通过设置响应头的Content-type值来指定返回数据的格式。</p><p>使用正确的Content-type值对于前后端数据交互非常重要，可以确保数据在传输过程中被正确处理和解析。</p><p>以上是关于前端设置请求头Content-type值的一份简要博客介绍，希望能对你有所帮助！</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FormData发起请求</title>
    <link href="/blog/2023/07/08/FormData%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82/"/>
    <url>/blog/2023/07/08/FormData%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>引言：<br>在现代Web开发中，我们常常需要通过HTTP请求向服务端发送数据。而当涉及到上传文件或发送复杂的表单数据时，我们需要使用FormData对象来实现更为灵活和高效的请求。本文将介绍通过form标签和JavaScript模仿FormData表单两种方式发起请求，并讲解如何获取图片信息并添加到FormData表单中，最后演示如何利用form标签将图片以FormData方式发送到服务端。</p><p>###一、通过form标签发起请求</p><ol><li>创建form标签：首先，在HTML页面中创建一个form标签，设置相关属性，包括method（请求方法）和action（请求地址）。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:3000/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 表单内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、添加input元素：在form标签内部添加各类input元素，作为表单数据的输入项。可以使用type属性为input元素指定不同类型的输入，例如文本输入框、密码输入框、文件上传等。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;form method<span class="hljs-operator">=</span><span class="hljs-string">&quot;POST&quot;</span> action<span class="hljs-operator">=</span><span class="hljs-string">&quot;http://localhost:3000/upload&quot;</span> enctype<span class="hljs-operator">=</span><span class="hljs-string">&quot;multipart/form-data&quot;</span> id<span class="hljs-operator">=</span><span class="hljs-string">&quot;myform&quot;</span>&gt;<br>  &lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;username&quot;</span>&gt;<br>  &lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;password&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;password&quot;</span>&gt;<br>  &lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;file&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;avatar&quot;</span> id<span class="hljs-operator">=</span><span class="hljs-string">&quot;imageInput&quot;</span>&gt;<br>  &lt;button type<span class="hljs-operator">=</span><span class="hljs-string">&quot;submit&quot;</span>&gt;提交&lt;/button&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们创建了一个form标签，并设置了以下属性：</p><ul><li><code>method=&quot;POST&quot;</code>：指定了请求方法为POST，这表示我们将向服务器发送数据。</li><li><code>action=&quot;/upload&quot;</code>：指定了请求地址为<code>/upload</code>，这是我们将要发送数据的服务端接口。</li><li><strong><code>enctype=&quot;multipart/form-data&quot;</code>：指定了数据编码方式为<code>multipart/form-data</code>，这是一种适用于包含文件上传的表单数据的编码方式（可以上传文件）。</strong></li></ul><p>在表单内部，我们添加了三个input标签作为输入项：</p><ul><li>第一个input标签用于输入用户名，<code>name=&quot;username&quot;</code>表示该字段在请求中的名称为<code>username</code>。</li><li>第二个input标签用于输入密码，<code>name=&quot;password&quot;</code>表示该字段在请求中的名称为<code>password</code>。</li><li>第三个input标签用于选择上传头像图片文件，<code>name=&quot;avatar&quot; accept=&quot;image/*&quot;</code>表示该字段在请求中的名称为<code>avatar</code>，并且只接受图像类型的文件。</li></ul><p>浏览器自动执行以下JavaScrip代码:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ada">var formData = <span class="hljs-keyword">new</span> FormData();<br>formData.append(<span class="hljs-symbol">&#x27;username</span>&#x27;, &#x27;输入的字段&#x27;);<br>formData.append(<span class="hljs-symbol">&#x27;password</span>&#x27;, &#x27;输入的字段);<br>formData.append(<span class="hljs-symbol">&#x27;avatar</span>&#x27;, imageInput.files[<span class="hljs-number">0</span>]);//imageInput.files[<span class="hljs-number">0</span>]这个对象才是重点。<br>/*如果files是多个文件的话，用以下代码：<br><span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>    formData.append(<span class="hljs-symbol">&#x27;file</span>&#x27;, files[i]);<br>&#125;*/这样服务器才能收到，要不然收不到信息。<br><br>var requestOptions = &#123;<br>    method: <span class="hljs-symbol">&#x27;POST</span>&#x27;,<br>    <span class="hljs-keyword">body</span>: formDat,<br>    headers: &#123;<br>     <span class="hljs-symbol">&#x27;Content</span>-<span class="hljs-keyword">Type</span>&#x27;: <span class="hljs-symbol">&#x27;multipart</span>/form-data&#x27;<br>     //更多的键值对对象，比如<span class="hljs-symbol">&#x27;token</span><span class="hljs-string">&#x27;:&#x27;</span>.....&#x27;<br>    &#125;<br>&#125;<br>    fetch(&#x27;/upload&#x27;, requestOptions)<br>      .<span class="hljs-keyword">then</span>(<span class="hljs-keyword">function</span>(response) &#123;<br>         // 处理响应...<br>      &#125;)<br>      .catch(<span class="hljs-keyword">function</span>(error) &#123;<br>         // 处理错误...<br>    &#125;);<br></code></pre></td></tr></table></figure><p>最后，我们添加了一个提交按钮，当用户点击该按钮时，表单会自动提交并将数据发送到指定的服务端地址。</p><p>3、表单响应消息：通过为form标签添加submit按钮，或者使用JavaScript编写点击事件来触发表单提交。提交后，浏览器将自动将表单数据打包成FormData对象，并将其发送到指定的服务端地址。然后这里添加JavaScript代码可以对返回信息进行处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myForm&#x27;</span>);<br><br>form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  event.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// 阻止表单默认的提交行为</span><br><br>  <span class="hljs-comment">// 在此处可以编写额外的处理逻辑，例如验证表单数据等</span><br><br>  <span class="hljs-comment">// 手动发送请求</span><br>  <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(form);<br>  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  xhr.<span class="hljs-title function_">open</span>(form.<span class="hljs-property">method</span>, form.<span class="hljs-property">action</span>);<br>  xhr.<span class="hljs-title function_">send</span>(formData);<br><br>  <span class="hljs-comment">// 如果需要处理响应，可以在此处监听xhr对象的onload、onerror等事件来处理</span><br>  xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> result = xhr.<span class="hljs-property">responseText</span><br>      <span class="hljs-comment">// console.log(typeof result)</span><br>      result = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="二、使用JavaScript模仿FormData表单发起请求"><a href="#二、使用JavaScript模仿FormData表单发起请求" class="headerlink" title="二、使用JavaScript模仿FormData表单发起请求"></a>二、使用JavaScript模仿FormData表单发起请求</h3><p>1、创建FormData对象：使用JavaScript中的FormData类来创建一个FormData对象。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-type">FormData</span>();<br></code></pre></td></tr></table></figure><p>2、添加表单数据：通过FormData对象的append方法，将表单数据逐个添加到FormData中。可以使用键值对的形式，设置表单字段的名称和值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">formData.<span class="hljs-built_in">append</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;John&#x27;</span>);<br>formData.<span class="hljs-built_in">append</span>(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3、发起请求：利用XMLHttpRequest或fetch等方式，将FormData对象作为请求体发送到服务端。服务端可以通过后台处理接收到的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myForm&#x27;</span>);<br><br>form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  event.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// 阻止表单默认的提交行为</span><br><br>  <span class="hljs-comment">// 在此处可以编写额外的处理逻辑，例如验证表单数据等</span><br><br>  <span class="hljs-comment">// 手动发送请求</span><br>  <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(form);<br>  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:3000/upload&#x27;</span>);<br>  <span class="hljs-comment">//让服务器知道我们传递的是什么数据格式（formdata还是json格式？）</span><br>  <span class="hljs-comment">//因为这里只有文本数据，所以只要使用&#x27;application/x-www-form-urlencoded&#x27;就行了</span><br>  xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br>  xhr.<span class="hljs-title function_">send</span>(formData);<br><br>  <span class="hljs-comment">// 如果需要处理响应，可以在此处监听xhr对象的onload、onerror等事件来处理</span><br>  xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> result = xhr.<span class="hljs-property">responseText</span><br>      <span class="hljs-comment">// console.log(typeof result)</span><br>      result = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="三、获取图片信息（二进制）并添加到FormData表单中"><a href="#三、获取图片信息（二进制）并添加到FormData表单中" class="headerlink" title="三、获取图片信息（二进制）并添加到FormData表单中"></a>三、获取图片信息（二进制）并添加到FormData表单中</h3><p>1、使用HTML的input元素：创建一个type属性为file的input元素，允许用户选择上传图片文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;input type=<span class="hljs-string">&quot;file&quot;</span> id=<span class="hljs-string">&quot;imageInput&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>2、监听input元素的change事件：通过JavaScript代码，为input元素添加change事件监听器，一旦用户选择了图片文件，便会触发该事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> imageInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;imageInput&#x27;</span>);<br><br>imageInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> file = imageInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>  <span class="hljs-comment">// 处理文件</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>3、获取图片文件：在change事件的处理函数中，使用input元素的files属性来获取用户选择的图片文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> file = imageInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>4、创建FormData对象并添加图片：根据前文所述的方法，创建FormData对象，并使用append方法将图片文件添加到FormData中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;image&#x27;</span>, file);<br><span class="hljs-comment">//还可以添加其他字段</span><br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;成功&#x27;</span>);<br></code></pre></td></tr></table></figure><p>5、然后可以使用JavaScript原生的fetch或者是ajax发起请求：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">var requestOptions = &#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    body: formData,<br>    headers: &#123;<br>     <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;multipart/form-data&#x27;</span><br>     <span class="hljs-regexp">//</span>更多的键值对对象，比如<span class="hljs-string">&#x27;token&#x27;</span>:<span class="hljs-string">&#x27;.....&#x27;</span><br>    &#125;<br>&#125;<br>    fetch(<span class="hljs-string">&#x27;/upload&#x27;</span>, requestOptions)<br>      .then(<span class="hljs-keyword">function</span>(response) &#123;<br>         <span class="hljs-regexp">//</span> 处理响应...<br>      &#125;)<br>      .catch(<span class="hljs-keyword">function</span>(error) &#123;<br>         <span class="hljs-regexp">//</span> 处理错误...<br>    &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="四、使用标签直接发送图片"><a href="#四、使用标签直接发送图片" class="headerlink" title="四、使用标签直接发送图片"></a>四、使用标签直接发送图片</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;form method<span class="hljs-operator">=</span><span class="hljs-string">&quot;POST&quot;</span> action<span class="hljs-operator">=</span><span class="hljs-string">&quot;http://localhost:3000/upload&quot;</span> enctype<span class="hljs-operator">=</span><span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>  &lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;file&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;image&quot;</span>&gt;<br>  &lt;button type<span class="hljs-operator">=</span><span class="hljs-string">&quot;submit&quot;</span>&gt;上传&lt;/button&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、获取到files[0]的对象，假设为file</p><p>2、创建一个FormData的对象，将file添加上去</p><p>3、使用fetch或者是ajax发起请求(或者是axios发起请求)</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
      <tag>Content-Type</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Input标签中的file属性到底有什么</title>
    <link href="/blog/2023/07/08/input%E6%A0%87%E7%AD%BE%E7%9A%84file%E5%B1%9E%E6%80%A7%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/blog/2023/07/08/input%E6%A0%87%E7%AD%BE%E7%9A%84file%E5%B1%9E%E6%80%A7%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、初认识files对象"><a href="#一、初认识files对象" class="headerlink" title="一、初认识files对象"></a>一、初认识files对象</h2><p>我们都知道，html5中有个input type&#x3D;file元素。用该元素可以实现页面上传文件的功能</p><p>但一般的做法只是简单的在表单中操作，我来研究一下深层东西</p><p>想要了解它，就要知道它的内置对象，files</p><p>页面上写一个input，然后选俩个图片，打印这个input对象。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">document.query<span class="hljs-constructor">Selector(&#x27;<span class="hljs-params">input</span>[<span class="hljs-params">type</span>=<span class="hljs-params">file</span>]&#x27;.<span class="hljs-params">addEventListen</span>(&#x27;<span class="hljs-params">change</span>&#x27;,<span class="hljs-params">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>      console.log(e.target.files)<br>&#125;)<br></code></pre></td></tr></table></figure><p>发现有下列值，在0中，有一个FileList对象</p><p>我们发现input选择的文件被记录到了这个对象中，<strong>这个是fileList对象，是一个只读对象，不能修改</strong></p><p>因为它不能修改，所以很难实现对已选中多个文件的删除某个文件等操作</p><p>里面记录了文件的name，size，type，和修改时间等，可知这个对象只存放了一些文件的信息，相当于是本地文件的索引，并不是把文件放到input中了，上传文件时它会再去找到实际的本地文件</p><blockquote><p>fileList数组包含多个File对象，File对象是继承与Blob对象的，关于file，url,blob，dataUrl可以详细查查</p></blockquote><p>一般url可以是本地地址，http地址等</p><p>blob对象一般的形式是：<code>blob:[http://192.168.100.151:8080/1148dcd6-952e-4478-823d-21b37e537c2f</code></p><p>dataUrl 一直格式是：以data:image&#x2F;jpeg;base64,这种类似形式打头的一串很长的字符串。</p><p><strong>这三种形式在img标签中src属性都可以调用。</strong></p><p>var file1&#x3D;new File([blob], “aa.png”,{type:”image&#x2F;jpg”}); &#x2F;&#x2F;第一个参数是Blob对象或者dataUrl，第二个参数是文件名，三个参数可选，规定文件类型</p><p>注意：第一个参数必须是对象，不能是转换成的字符串，比如uniapp或者微信小程序的chooseImage方法返回的blob的url，他是一个字符串，这样生成的File对象只是将url字符串变成文件了，不是文件本身！！！</p><p>想把blob字符串变成Blob对象，可以用es6的：const blob &#x3D; await fetch(image.path).then(r &#x3D;&gt; r.blob())</p><p>或者用传统的XHR或者ajax也行，就是把blob对象根据url给获取出来就行。</p><p>利用这个files对象，我们可以实现很多功能，例如</p><h2 id="三、应用和转化"><a href="#三、应用和转化" class="headerlink" title="三、应用和转化"></a>三、应用和转化</h2><h4 id="1、选择图片未经过后端显示预览图片"><a href="#1、选择图片未经过后端显示预览图片" class="headerlink" title="1、选择图片未经过后端显示预览图片"></a>1、选择图片未经过后端显示预览图片</h4><p>方法1：利用window的url工具将文件生成url，再将url赋值给img的src属性，显示出选中图像</p><p>顺便提一下，input中控制选中类型加一个accept属性就行了，只会显示设定的文件类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;.doc，.jpg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#file1&#x27;</span>).<span class="hljs-title function_">addEventListerner</span>(<span class="hljs-string">&#x27;change&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-comment">// 根据这个 &lt;input&gt; 获取文件的 HTML5 js 对象</span><br>    <span class="hljs-keyword">var</span> files = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>;        <br>    <span class="hljs-keyword">if</span> (files &amp;&amp; files.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 获取目前上传的文件</span><br>      file = files[<span class="hljs-number">0</span>];<br>      <span class="hljs-comment">// 来在控制台看看到底这个对象是什么</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);<br>      <span class="hljs-comment">// 那么我们可以做一下诸如文件大小校验的动作</span><br>      <span class="hljs-keyword">if</span>(file.<span class="hljs-property">size</span> &gt; <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;图片大小不能超过 2MB!&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-comment">// !!!!!!</span><br>      <span class="hljs-comment">// 下面是关键的关键，通过这个 file 对象生成一个可用的图像 URL</span><br>      <span class="hljs-comment">// 获取 window 的 URL 工具     </span><br>      <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">URL</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>;     <br>      <span class="hljs-comment">// 通过 file 生成目标 url</span><br>      <span class="hljs-keyword">var</span> imgURL = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file);<br>      <span class="hljs-comment">// 用这个 URL 产生一个 &lt;img&gt; 将其显示出来</span><br>           <span class="hljs-keyword">var</span> imgElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>           imgElement.<span class="hljs-property">src</span> = url;<br>           <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgElement);<br>      <span class="hljs-comment">// 使用下面这句可以在内存中释放对此 url 的伺服，跑了之后那个 URL 就无效了</span><br>       <span class="hljs-comment">//URL.revokeObjectURL(imgURL);</span><br>    &#125;<br>  &#125;<br>  );<br><br></code></pre></td></tr></table></figure><p>方法二：利用html5的FileReader()读取文件</p><p>*前提是浏览器支持的话</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.FileReader) &#123;  <br>    <span class="hljs-keyword">var</span> fr = <span class="hljs-keyword">new</span> FileReader();  <br>    <span class="hljs-comment">// add your code here  </span><br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>    alert(<span class="hljs-string">&quot;Not supported by your browser!&quot;</span>);  <br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">showPreview</span>(<span class="hljs-params">source</span>) &#123;  </span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> file = source.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];  </span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">FileReader</span>) &#123;  </span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();  </span><br><span class="language-javascript">                fr.<span class="hljs-property">onloadend</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;  </span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;portrait&quot;</span>).<span class="hljs-property">src</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>;  </span><br><span class="language-javascript">                &#125;;  </span><br><span class="language-javascript">                fr.<span class="hljs-title function_">readAsDataURL</span>(file);  <span class="hljs-comment">//也是利用将图片作为url读出</span></span><br><span class="language-javascript">            &#125;  </span><br><span class="language-javascript">        &#125;  </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;showPreview(this)&quot;</span> /&gt;</span>  <br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;portrait&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;75&quot;</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>FileReader还有一些其他用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;oscar999&quot;</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-keyword">function</span>  <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params">files</span>)  </span><br><span class="language-javascript">  &#123;  </span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(files.<span class="hljs-property">length</span>)  </span><br><span class="language-javascript">    &#123;  </span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> file = files[<span class="hljs-number">0</span>];  </span><br><span class="language-javascript">       <span class="hljs-comment">//new一个对象</span></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();  </span><br><span class="language-javascript">       <span class="hljs-comment">//有点类似方法重载</span></span><br><span class="language-javascript">       reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">       &#123;  </span><br><span class="language-javascript">           <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;filecontent&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span>;  </span><br><span class="language-javascript">       &#125;;  </span><br><span class="language-javascript">       <span class="hljs-comment">//调用reader.readAdText方法，默认会调用onload方法。</span></span><br><span class="language-javascript">       reader.<span class="hljs-title function_">readAsText</span>(file);   <span class="hljs-comment">//作为字符串读出</span></span><br><span class="language-javascript">        <span class="hljs-comment">//reader.readAsText(file,&#x27;gb2312&#x27;);   //默认是用utf-8格式输出的，想指定输出格式就再添加一个参数，像txt的ANSI格式只能用国标才能显示出来</span></span><br><span class="language-javascript">    &#125;  </span><br><span class="language-javascript">  &#125;  </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span>/&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;filecontent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p><strong>readAsText</strong>一般只能读取txt,html等等文件，局限性较大，比如想要前端读excel文件，由于解决文件编码问题较为复杂，需要用到js-xlsx插件(前端web浏览器插件)，具体可百度方法。</p><p><strong>常用API：</strong></p><p>FileReader.readAsDataURL(File) &#x2F;&#x2F;转换成base64格式</p><p>FileReader.readAsText() &#x2F;&#x2F;转换成字符串格式</p><p>FileReader.readAsArrayBuffer(File) &#x2F;&#x2F;转换成ArrayBuffer格式</p><p>FileReader.readAsBinaryString(File) &#x2F;&#x2F;转换成原始二进制格式（貌似已被废除）</p><p>FileReader.onload &#x3D; function (e) { console.log(e.target.result) } &#x2F;&#x2F;在上述读取事件完成时触发</p><h4 id="2、二-文件拖拽的方法保存文件"><a href="#2、二-文件拖拽的方法保存文件" class="headerlink" title="2、二.文件拖拽的方法保存文件"></a>2、<strong>二.文件拖拽的方法保存文件</strong></h4><p>关于文件拖拽下面有注释，我主要说一下怎么给用js给input赋值，而不是手动去选文件</p><p>因为拖拽的区域只是一个div，无法进行上传操作，所以需要加一个form和input，让拖拽进去的文件进入input中。</p><p>取出files后，用 <strong>$</strong> ( <strong>“#file1”</strong> )[0].<strong>files</strong>&#x3D;files;将文件赋值给input，注意赋值的必须是fileList对象，不要试图只放进去一个文件，fileList只读。</p><p>然后用h5中的FormData将form转化，提交即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dashed <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">3000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dotted <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">object-fit</span>: contain;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;file&quot;</span>]</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#007bff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.3s</span> ease;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0069d9</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>实现文件拖拽<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        拖拽图片到此处<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file1&quot;</span>&gt;</span>选择文件<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragenter&#x27;</span>, ignoreDrag);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;dragover&#x27;</span>, ignoreDrag);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.container&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;drop&#x27;</span>, upload);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#form1&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>,upload)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">ignoreDrag</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">stopPropagation</span>();</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFileReader</span>(<span class="hljs-params">file, callback</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">FileReader</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">callback</span>(<span class="hljs-literal">true</span>, file);</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您的浏览器不支持FileReader!!!&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();</span><br><span class="language-javascript">            fr.<span class="hljs-title function_">readAsDataURL</span>(file);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            fr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> url = <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span>;</span><br><span class="language-javascript">                <span class="hljs-title function_">callback</span>(<span class="hljs-literal">true</span>, file, url);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            fr.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">callback</span>(<span class="hljs-literal">false</span>, file);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//进行上传图片</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(e.dataTransfer.files)</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> files = e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>?e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>:e.<span class="hljs-property">dataTransfer</span>.<span class="hljs-property">files</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">myFileReader</span>(files[i], <span class="hljs-keyword">function</span> (<span class="hljs-params">result, file, url</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (result) &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> imgElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">                            imgElement.<span class="hljs-property">src</span> = url;</span><br><span class="language-javascript">                            box.<span class="hljs-title function_">appendChild</span>(imgElement);</span><br><span class="language-javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;不要上传文件夹&quot;</span>);</span><br><span class="language-javascript">                            flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;file1&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">//虽然说是可读（不可改写），但是我们可以改变其子元素（数组）的值。不建议使用这种方法。</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// fileInput.files = files;</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// var formData = new FormData(document.getElementById(&quot;form1&quot;));</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">                    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, <span class="hljs-string">&#x27;这是前面一段话&#x27;</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">//实现多个文件上传</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;file&#x27;</span>, files[i]);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-comment">//添加更多字段</span></span><br><span class="language-javascript">                    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, <span class="hljs-string">&#x27;上传成功&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">                    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;http://localhost:3000/upload&quot;</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">                    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> ret = xhr.<span class="hljs-property">responseText</span>;</span><br><span class="language-javascript">                            <span class="hljs-keyword">if</span> (ret) &#123;</span><br><span class="language-javascript">                                <span class="hljs-comment">// 保存成功后的逻辑</span></span><br><span class="language-javascript">                            &#125;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;;</span><br><span class="language-javascript">                    xhr.<span class="hljs-title function_">send</span>(formData);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后台获取文件还是用<code>formidable</code>接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;upload&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">const</span> form = <span class="hljs-keyword">new</span> formidable.<span class="hljs-title class_">IncomingForm</span>(&#123;<br><span class="hljs-comment">//配置上传文件的存放位置</span><br><span class="hljs-attr">uploadDir</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>,<span class="hljs-string">&#x27;compare&#x27;</span>),<br><span class="hljs-comment">//保留上传文件后缀</span><br><span class="hljs-attr">keepExtensions</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br>form.<span class="hljs-title function_">parse</span>(req, <span class="hljs-function">(<span class="hljs-params">err, fields, files</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files.<span class="hljs-property">file</span>[<span class="hljs-number">0</span>].<span class="hljs-property">newFilename</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files.<span class="hljs-property">file</span>[<span class="hljs-number">0</span>].<span class="hljs-property">filepath</span>);   <br>        <span class="hljs-comment">//先转化为png图片,后续操作</span><br>        <span class="hljs-title function_">convertToPNG</span>(files.<span class="hljs-property">file</span>[<span class="hljs-number">0</span>].<span class="hljs-property">filepath</span>,files.<span class="hljs-property">file</span>[<span class="hljs-number">0</span>].<span class="hljs-property">newFilename</span>)<br>&#125;);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3、vue-axios上传图片"><a href="#3、vue-axios上传图片" class="headerlink" title="3、vue+axios上传图片"></a>3、vue+axios上传图片</h4><p>无论ajax还是axios，都不是直接用表单提交的，都是 要用 new FormData()转化一下。</p><p>所以axios方法与ajax方法类似</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputBtn&quot;</span>  @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;uploadMarketingForm&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">uploadMarketingForm</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br><span class="hljs-keyword">var</span> fileName=e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>; <span class="hljs-comment">//文件名</span><br><span class="hljs-keyword">var</span> fileSize=e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">size</span>; <span class="hljs-comment">//文件大小</span><br><span class="hljs-keyword">var</span> param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>        <span class="hljs-comment">//添加表单参数，如果后台用文件数组接收</span><br>        <span class="hljs-comment">//param.append(&quot;file&quot;, e.target.files);</span><br>        <span class="hljs-comment">//如果后台只接收单一文件</span><br>param.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);<br>    param.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;name&quot;</span>, fileName);<br>    param.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;size&quot;</span>, fileSize);<br>        <span class="hljs-comment">//设置表头类型</span><br><span class="hljs-keyword">const</span> config = &#123;<br><span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data&quot;</span> &#125;<br>&#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">axios</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/.../uploadTest&quot;</span>, param, config).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br>&#125;,<br><br></code></pre></td></tr></table></figure><p>在Node.js中还是这么接收</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gams">const form = new formidable.IncomingForm(&#123;<br><span class="hljs-comment">//配置上传文件的存放位置</span><br>uploadDir: path.join(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>,<span class="hljs-string">&#x27;compare&#x27;</span>),<br><span class="hljs-comment">//保留上传文件后缀</span><br>keepExtensions: true,<br>&#125;)<br>form.parse(req, (err, fields, <span class="hljs-keyword">files</span>) =&gt; &#123;<br>       console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">files</span>.<span class="hljs-keyword">file</span>[<span class="hljs-number">0</span>].newFilename);<br>       console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">files</span>.<span class="hljs-keyword">file</span>[<span class="hljs-number">0</span>].filepath);   <br>       <span class="hljs-comment">//先转化为png图片,后续操作</span><br>       convertToPNG(<span class="hljs-keyword">files</span>.<span class="hljs-keyword">file</span>[<span class="hljs-number">0</span>].filepath,<span class="hljs-keyword">files</span>.<span class="hljs-keyword">file</span>[<span class="hljs-number">0</span>].newFilename)<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sharp安转问题</title>
    <link href="/blog/2023/07/06/sharp%E5%AE%89%E8%BD%AC%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2023/07/06/sharp%E5%AE%89%E8%BD%AC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在项目目录新建一个  .npmrc 文件</p><p>然后输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sharp_binary_host=https:<span class="hljs-regexp">//</span>npmmirror.com<span class="hljs-regexp">/mirrors/</span>sharp<br>sharp_libvips_binary_host = https:<span class="hljs-regexp">//</span>npmmirror.com<span class="hljs-regexp">/mirrors/</span>sharp-libvips<br></code></pre></td></tr></table></figure><p>然后执行npm install sharp就可以下载了</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm安转canvas遇到的问题</title>
    <link href="/blog/2023/07/06/canvas%E5%AE%89%E8%BD%AC%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2023/07/06/canvas%E5%AE%89%E8%BD%AC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>使用 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install canvas --canvas_binary_host_mirror=https:<span class="hljs-regexp">//</span>registry.npmmirror.com<span class="hljs-regexp">/-/</span>binary/canvas<br></code></pre></td></tr></table></figure><p>可以安转成功!</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复习MySql基本操作</title>
    <link href="/blog/2023/07/03/%E5%A4%8D%E4%B9%A0mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/blog/2023/07/03/%E5%A4%8D%E4%B9%A0mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>数据库复习是非常重要的，下面来回顾一下数据库常用的操作和语法。</p><ol><li><p>显示数据库：<br>SHOW DATABASES;</p></li><li><p>创建数据库：<br>CREATE DATABASE 数据库名称;</p></li><li><p>创建数据库（如果不存在）：<br>CREATE DATABASE IF NOT EXISTS 数据库名称;</p></li><li><p>删除数据库：<br>DROP DATABASE 数据库名称;</p></li><li><p>删除数据库（如果存在）：<br>DROP DATABASE IF EXISTS 数据库名称;</p></li><li><p>使用数据库：<br>USE 数据库名称;</p></li><li><p>查询当前使用的数据库：<br>SELECT DATABASE();</p></li><li><p>显示表：<br>SHOW TABLES;</p></li><li><p>查看表结构：<br>DESC 表名称;</p></li><li><p>创建表：<br>  CREATE TABLE 表名 (<br>  字段名1 数据类型1,<br>  字段名2 数据类型2,<br>  …<br>  字段名n 数据类型n<br>  );</p></li><li><p>数据类型示例：</p><ul><li>tinyint：小整数型，占一个字节。</li><li>int：大整数型，占四个字节。</li><li>double：浮点类型，使用格式：字段名 double(总长度,小数点后保留的位数)。</li><li>date：日期值，只包含年月日。</li><li>datetime：混合日期和时间值，包含年月日时分秒。</li><li>char：定长字符串。</li><li>varchar：变长字符串。</li></ul></li><li><p>案例：设计学生表<br>需求：设计一张学生表，请注重数据类型、长度的合理性。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students (<br>id <span class="hljs-type">int</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>birthday <span class="hljs-type">date</span>,<br>score <span class="hljs-type">double</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>),<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>),<br>contact <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>status tinyint<br>);<br></code></pre></td></tr></table></figure></li><li><p>删除表：<br>DROP TABLE 表名;</p></li><li><p>修改表名：<br>ALTER TABLE 表名 RENAME TO 新的表名;</p></li><li><p>添加列：<br>ALTER TABLE 表名 ADD 列名 数据类型;</p></li><li><p>修改列的数据类型：<br>ALTER TABLE 表名 MODIFY 列名 新数据类型;</p></li><li><p>修改列的名称和数据类型：<br>ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;</p></li><li><p>删除列：<br>ALTER TABLE 表名 DROP 列名;</p></li><li><p>插入数据：</p><ul><li><p>插入指定列的数据：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> INTO 表名(列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2</span>, ...) VALUES(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure></li><li><p>插入所有列的数据：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span>(值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>更新数据：<br>UPDATE 表名 SET 列名1&#x3D;值1, 列名2&#x3D;值2, … [WHERE 条件];</p></li><li><p>删除数据：<br>DELETE FROM 表名 [WHERE 条件];</p></li><li><p>查询数据：<br>SELECT 字段列表 FROM 表名 WHERE 条件列表;</p></li><li><p>模糊查询：<br>使用 LIKE 关键字和通配符进行模糊查询，通配符：</p><ul><li><code>_</code>: 代表单个任意字符。</li><li><code>%</code>: 代表任意个数字符。</li></ul><p>示例：</p><ul><li>查询姓’马’的学生信息：<br><code>SELECT * FROM stu WHERE name LIKE &#39;马%&#39;;</code></li><li>查询第二个字是’花’的学生信息：<br><code>SELECT * FROM stu WHERE name LIKE &#39;_花%&#39;;</code></li><li>查询名字中包含 ‘德’ 的学生信息：<br><code>SELECT * FROM stu WHERE name LIKE &#39;%德%&#39;;</code></li></ul></li><li><p>排序查询：<br>使用 ORDER BY 关键字进行排序查询。</p><p>示例：</p><ul><li>按照年龄升序排列学生信息：<br><code>SELECT * FROM stu ORDER BY age;</code></li><li>按照数学成绩降序排列学生信息：<br><code>SELECT * FROM stu ORDER BY math DESC;</code></li><li>按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列：<br><code>SELECT * FROM stu ORDER BY math DESC, english ASC;</code></li></ul></li><li><p>聚合函数：</p><ul><li>count(列名)：统计数量。</li><li>max(列名)：最大值。</li><li>min(列名)：最小值。</li><li>sum(列名)：求和。</li><li>avg(列名)：平均值。</li></ul><p>示例：</p><ul><li>统计学生总数：<br><code>SELECT COUNT(*) FROM stu;</code></li><li>查询数学成绩的最高分：<br><code>SELECT MAX(math) FROM stu;</code></li></ul></li><li><p>分组查询：<br>使用 GROUP BY 关键字进行分组查询。</p><p>示例：</p><ul><li>查询男同学和女同学各自的数学平均分：<br><code>SELECT sex, AVG(math) FROM stu GROUP BY sex;</code></li><li>查询男同学和女同学各自的数学平均分，以及各自人数：<br><code>SELECT sex, AVG(math), COUNT(*) FROM stu GROUP BY sex;</code></li><li>查询男同学和女同学各自的数学平均分，以及各自人数，要求分数低于70分的不参与分组：<br><code>SELECT sex, AVG(math), COUNT(*) FROM stu WHERE math &gt; 70 GROUP BY sex;</code></li></ul></li><li><p>分页查询：<br>使用 LIMIT 关键字进行分页查询。</p><p>示例：</p><ul><li>每页显示3条数据，查询第1页数据：<br><code>SELECT * FROM stu LIMIT 0, 3;</code></li><li>每页显示3条数据，查询第2页数据：<br><code>SELECT * FROM stu LIMIT 3, 3;</code></li><li>从上面的练习推导出起始索引计算公式：<br><code>起始索引 = (当前页码 - 1) * 每页显示的条数</code></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>querySelectorAll()和getElementsByTagName的区别</title>
    <link href="/blog/2023/07/03/queryselectorall-%E5%92%8Cgetelementsbytagname%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2023/07/03/queryselectorall-%E5%92%8Cgetelementsbytagname%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>在《DOM的操作》一节中知道<code>querySelectorAll()</code>和<code>getElementsByTagName()</code>两个方法都是用来查找DOM元素的。通过上一节的学习，知道<code>querySelectorAll()</code>方法将获取到<code>NodeList</code>对象，<code>getElementsByTagName()</code>方法获取到的是<code>HTMLCollection</code>对象。虽然他们获取的都是DOM动态集合，但两者还是略有差异的。今天我们就来看这两者之间的区别。</p><p>有关于<code>querySelectorAll()</code>和<code>getElementsByTagName()</code>两者的区别，这里推荐几篇文章：</p><ul><li>@Jin的《简单讨论 <code>querySelectorAll</code> Vs <code>getElementsByTagName</code> 区别》</li><li>@Nicholas C. Zakas 的《Why is <code>getElementsByTagName()</code> faster than <code>querySelectorAll()</code>?》</li><li>《为什么 <code>getElementsByTagName</code> 比 <code>querySelectorAll</code> 方法快》</li></ul><p>为了能理解这两者之间的区别，接下来的内容和整个思路是跟着上面几篇文章进行的。</p><h2 id="一、两者区别之处"><a href="#一、两者区别之处" class="headerlink" title="一、两者区别之处"></a>一、两者区别之处</h2><p><code>querySelectorAll()</code>和<code>getElementsByTagName()</code>两个方法都是用来从DOM树中获取元素集合。如果简单的理解就是用来选择DOM元素。虽然表面上都是用来选择DOM元素，但事实并非如此，两者之间还有很大的区别：</p><table><thead><tr><th></th><th>querySelectorAll()</th><th>getElementsByTagName</th></tr></thead><tbody><tr><td>遍历方式</td><td>深度优先</td><td>深度优先</td></tr><tr><td>返回值类型</td><td>NodeList集合</td><td>HTMLCollection集合</td></tr><tr><td>返回值状态</td><td>静态</td><td>动态</td></tr></tbody></table><h2 id="二、两者的返回值"><a href="#二、两者的返回值" class="headerlink" title="二、两者的返回值"></a>二、两者的返回值</h2><p><code>querySelectorAll()</code>和<code>getElementsByTagName()</code>两者的主要区别就是<strong>返回值</strong>。前者返回的是<code>NodeList</code>集合，后者返回的是<code>HTMLCollection</code>集合。其前者是一个静态集合，后者是一个动态集合。</p><blockquote><p>动态集合指的就是元素集合会随着DOM树元素的增加而增加，减少而减少；静态集合则不会受DOM树元素变化的影响。但是DOM树如果有修改内容，静态集合还是会随之改变。</p></blockquote><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.change</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: tomato;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;block&quot;</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;box&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> content1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> content2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是未修改之前的值&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> +  content1[<span class="hljs-number">2</span>].<span class="hljs-property">textContent</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是未修改之前的值&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> +  content2[<span class="hljs-number">2</span>].<span class="hljs-property">textContent</span>);</span><br><span class="language-javascript">        content2[<span class="hljs-number">2</span>].<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;测试一下&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> paragraphs2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        paragraphs2.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;新增内容&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        box[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(paragraphs2);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是修改之后的值&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + content1[<span class="hljs-number">2</span>].<span class="hljs-property">textContent</span>,<span class="hljs-string">&#x27;content1长度为&#x27;</span> + content1.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是修改之后的值&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> +  content2[<span class="hljs-number">2</span>].<span class="hljs-property">textContent</span>,<span class="hljs-string">&#x27;content2长度为&#x27;</span> + content2.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> content3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;content3为重新使用querySelectorAll获得的新快照&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> +  content3[<span class="hljs-number">2</span>].<span class="hljs-property">textContent</span>,<span class="hljs-string">&#x27;content3长度为&#x27;</span> + content1.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content1)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content2)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content3)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;结论是getElementsByTagName获取到的HTMLCollection是动态的，querySelectorAll获取到的NodeList是静态的（是原来对象的快照-复制品），如果通过需要添加/删除子元素的操作，不要使用querySelectorAll方法来获取节点。&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">这是未修改之前的值默认内容<br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">21</span> 这是未修改之前的值默认内容<br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">28</span> 这是修改之后的值测试一下 content1长度为<span class="hljs-number">5</span><br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">29</span> 这是修改之后的值测试一下 content2长度为<span class="hljs-number">4</span><br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">31</span> content3为重新使用querySelectorAll获得的新快照测试一下 content3长度为<span class="hljs-number">5</span><br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">32</span> <span class="hljs-built_in">HTMLCollection</span>(<span class="hljs-number">5</span>) <span class="hljs-selector-attr">[p, p, p, p, p]</span><br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">33</span> <span class="hljs-built_in">NodeList</span>(<span class="hljs-number">4</span>) <span class="hljs-selector-attr">[p, p, p, p]</span><br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> <span class="hljs-built_in">NodeList</span>(<span class="hljs-number">5</span>) <span class="hljs-selector-attr">[p, p, p, p, p]</span><br>DomBom<span class="hljs-selector-class">.js</span>:<span class="hljs-number">35</span> 结论是getElementsByTagName获取到的HTMLCollection是动态的，querySelectorAll获取到的NodeList是静态的（是原来对象的快照-复制品），如果通过需要添加/删除子元素的操作，不要使用querySelectorAll方法来获取节点。<br></code></pre></td></tr></table></figure><p><code>NodeList</code>对象是一个节点的集合，是由<code>Node.childNodes</code>和<code>document.querySelectorAll()</code>返回的。<code>NodeList</code>并不是都是静态的，也就是说<code>Node.childNodes</code>返回的是动态的元素集合；<code>querySelectorAll()</code> 返回的是一个静态集合。</p><p><code>HTMLCollection</code> 返回一个时时包括所有给定标签名称的元素的HTML集合，也就是动态集合。</p><h2 id="三、为什么-getElementsByTagName比-QuerySelectors-方法快"><a href="#三、为什么-getElementsByTagName比-QuerySelectors-方法快" class="headerlink" title="三、为什么 getElementsByTagName比 QuerySelectors 方法快?"></a>三、为什么 getElementsByTagName比 QuerySelectors 方法快?</h2><p>对于一些特定的场景，getElementsByTagName 方法相比于 QuerySelectors 方法具有更高的性能。</p><p>首先，让我们了解一下这两种方法的原理和区别。</p><p>· getElementsByTagName 方法是一个原生方法，它可以通过标签名获取文档中的元素节点。例如，document.getElementsByTagName(“div”) 将返回文档中所有的 div 元素。</p><p>· QuerySelectors 方法是一个更灵活的方法，它允许我们使用 CSS 选择器来获取元素。例如，document.querySelector(“div”) 将返回第一个匹配到的 div 元素。</p><p>· 使用<code>getElementsByTagName</code>方法我们得到的结果就像是一个对象的索引，而通过<code>querySelectorAll</code>方法我们得到的是一个对象的克隆；所以当这个对象数据量非常大的时候，显然克隆这个对象所需要花费的时间是很长的。</p><p>现在，让我们来探讨为什么 getElementsByTagName 方法比 QuerySelectors 方法更快的原因。</p><ol><li><p>实现方式：getElementsByTagName 方法是浏览器原生支持的方法，在底层实现上经过了优化和性能调整。而 QuerySelectors 方法是通过 JavaScript 实现的，需要解析 CSS 选择器并遍历整个文档来查找匹配的元素，相对而言较慢。</p></li><li><p>查询范围：getElementsByTagName 方法只需要遍历特定标签名的元素，而 QuerySelectors 方法需要遍历整个文档来查找匹配的元素。因此，在查询范围较大的文档中，getElementsByTagName 方法更高效。</p></li></ol><p>为了验证这个性能差异，我们可以使用 Performance 提供的 now 方法进行一个简单的案例。</p><blockquote><p>使用的<code>console.time</code>和<code>console.timeEnd</code>方法得出来的时间并不是特别准确的；更准确的做法是使用<code>Performance</code>这个对象提供的<code>now</code>方法来进行计时。</p></blockquote><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用 getElementsByTagName 方法获取所有的 div 元素</span><br><span class="hljs-keyword">const</span> startGetElementsByTagName = performance.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">const</span> divElements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">const</span> endGetElementsByTagName = performance.<span class="hljs-title function_">now</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`getElementsByTagName 方法耗时：<span class="hljs-subst">$&#123;endGetElementsByTagName - startGetElementsByTagName&#125;</span> 毫秒`</span>);<br><br><span class="hljs-comment">// 使用 QuerySelectors 方法获取所有的 div 元素</span><br><span class="hljs-keyword">const</span> startQuerySelectors = performance.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">const</span> divElements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">const</span> endQuerySelectors = performance.<span class="hljs-title function_">now</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`QuerySelectors 方法耗时：<span class="hljs-subst">$&#123;endQuerySelectors - startQuerySelectors&#125;</span> 毫秒`</span>);<br></code></pre></td></tr></table></figure><p>通过比较两种方法的耗时，我们可以看到 getElementsByTagName 方法相对于 QuerySelectors 方法具有更短的执行时间。</p><p>然而，需要注意的是，性能差异可能受到多种因素的影响，例如页面结构、元素数量等。在实际应用中，我们应该根据具体的需求和场景选择合适的方法来获取元素。</p><p>总结起来，getElementsByTagName 方法比 QuerySelectors 方法更快的原因主要是因为它是浏览器原生支持的，并且查询范围相对较小。通过合理选择方法，我们可以提升页面加载和运行速度，从而提供更好的用户体验。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript实现深度优先和广度优先</title>
    <link href="/blog/2023/07/03/javascript%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/"/>
    <url>/blog/2023/07/03/javascript%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/</url>
    
    <content type="html"><![CDATA[<h2 id="一、深度优先遍历"><a href="#一、深度优先遍历" class="headerlink" title="一、深度优先遍历"></a>一、深度优先遍历</h2><p>维基百科是这样描述深度优先遍历的：</p><blockquote><p>深度优先搜索算法（英语：Depth-First-Search，简称DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点<code>v</code>的所在边都己被探寻过，搜索将回溯到发现节点<code>v</code>的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。</p></blockquote><p>简单点来描述：深度优先遍历从一路径的起始点开始追溯，直到遍历该路径的最后一个节点，然后回溯，继续追溯下一路径，依次类推，直到遍历完成。</p><p>深度优先遍历实现相对简单，通过递归即可完成。不断递归，直到本路径最后一个节点，然后回溯，继续递归。如下图所示。</p><p><img src="https://koreantion.github.io/img/blog/DFS.jpg"></p><h2 id="二、广度优先遍历"><a href="#二、广度优先遍历" class="headerlink" title="二、广度优先遍历"></a>二、广度优先遍历</h2><p>除了深度优先遍历之外，还有<strong>广度优先遍历</strong>：</p><blockquote><p>广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用open-closed表。\</p></blockquote><p>广度优先遍历，则优先遍历同一层次最邻近的节点，然后再往下遍历上一层首个节点的下层节点。如下图所示：</p><p><img src="https://koreantion.github.io/img/blog/BFS.jpg"></p><p>DOM的结构和数据结构中的“树”型结构比较类似，所以很自然的就可以使用<strong>DFS</strong>和<strong>BFS</strong>进行遍历。</p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>比如我们有一个这样的HTML结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;paragragh&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的DOM树结构如下图所示：</p><p><img src="https://koreantion.github.io/img/blog/DOM%E6%A0%91.jpg"></p><p>对于DOM树的深度优先遍历，执行的结果应该如下：</p><p><img src="https://koreantion.github.io/img/blog/DFSDOM%E6%A0%91.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DFS</span>.<span class="hljs-property">js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. 首先，我们定义了一个函数 `DFS`，它接受一个参数 `node`，代表要遍历的DOM节点。</span><br><span class="hljs-comment">   2. 在 `DFS` 函数中，我们首先检查传入的节点是否存在。如果节点不存在，则直接返回。</span><br><span class="hljs-comment">   3. 接着，我们定义了一个变量 `deep`，用于表示当前节点所在的深度，默认值为 1。这个变量作为递归调用时的第二个参数传递给下一层的DFS函数。</span><br><span class="hljs-comment">   4. 然后，我们使用 `console.log` 打印出当前节点的标签名、类名和深度。</span><br><span class="hljs-comment">   5. 接下来，我们检查当前节点是否有子节点（即 `node.children.length` 是否为 0）。如果没有子节点，表示已经到达叶子节点，我们直接返回。</span><br><span class="hljs-comment">   6. 如果当前节点有子节点，我们使用 `Array.from` 将其转换为一个数组，并对每个子节点调用递归调用 `DFS` 函数，将深度加1传递给下一层。</span><br><span class="hljs-comment">   7. 这样，递归会不断地向下遍历DOM树，直到遍历完所有节点或到达叶子节点为止。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">node</span> - 要遍历的DOM节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Null</span>&#125; 返回值描述</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DFS</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!node)&#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> deep = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;node.nodeName&#125;</span>.<span class="hljs-subst">$&#123;node.classList&#125;</span>  <span class="hljs-subst">$&#123;deep&#125;</span>`</span>)<br>    <span class="hljs-keyword">if</span>(!node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(node.<span class="hljs-property">children</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>        <span class="hljs-title function_">DFS</span>(item,deep+<span class="hljs-number">1</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">DFS</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.root&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">控制台输出结果：<br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> DIV<span class="hljs-selector-class">.root</span>  <span class="hljs-number">1</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> DIV<span class="hljs-selector-class">.container</span>  <span class="hljs-number">2</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> SECTION<span class="hljs-selector-class">.sidebar</span>  <span class="hljs-number">3</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> UL<span class="hljs-selector-class">.menu</span>  <span class="hljs-number">4</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> LI.  <span class="hljs-number">5</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> A.  <span class="hljs-number">6</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> LI.  <span class="hljs-number">5</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> A.  <span class="hljs-number">6</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> SECTION<span class="hljs-selector-class">.main</span>  <span class="hljs-number">3</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> ARTICLE<span class="hljs-selector-class">.paragragh</span>  <span class="hljs-number">4</span><br>深度优先(DFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">17</span> P<span class="hljs-selector-class">.note</span>  <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>上面通过JavaScript使用了递归的方法实现了DFS，在控制台依次打印出节点的元素名，类名和层次。</p><blockquote><p>深度优先可以理解为“一条路走到黑”，只有在撞到了“南墙”才回头。具体到DOM树中来说就是，从根节点开始，继而访问它的直接子元素，并依此往复直到不存在子元素。</p></blockquote><p>再来看看对于DOM树的广度优先遍历的结果。广度优先可以理解为“一层一层的剥离”，对同一层次的元素全部遍历过后，再遍历下一层。广度优先适合使用队列这种数据结构来实现，将每层的节点依次放入队列，并根据队列“先入先出”的特性取出就可以了。在JavaScript中模拟队列的的方法可以使用数组方法的<code>push</code>和<code>shift</code>对应入队和出队操作。同样给出JavaScript实现的DOM树遍历。</p><p>对于DOM树的广度优先遍历，执行的结果应该如下：</p><p><img src="https://koreantion.github.io/img/blog/BFSDOM%E6%A0%91.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">BFS</span>.<span class="hljs-property">js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">    1. 首先，我们定义了一个函数 `BFS`，它接受一个参数 `root`，代表要遍历的DOM树的根节点。</span><br><span class="hljs-comment">    2. 在 `BFS` 函数中，我们首先检查传入的根节点是否存在。如果不存在，则直接返回。</span><br><span class="hljs-comment">    3. 接下来，我们创建一个队列 `queue`，并向其添加一个初始元素，该元素包含两个属性：`item`，表示当前处理的节点；`depth`，表示当前节点所在的深度，初值为 1。</span><br><span class="hljs-comment">    4. 进入 `while` 循环，判断队列 `queue` 是否为空。如果队列为空，则说明已经遍历完所有节点，结束循环。</span><br><span class="hljs-comment">    5. 在循环内部，我们从队列的头部取出一个节点 `node`，使用 `queue.shift()` 方法。</span><br><span class="hljs-comment">    6. 使用 `console.log` 打印出当前节点 `node.item` 的标签名、类名和深度。</span><br><span class="hljs-comment">    7. 如果当前节点没有子节点（即 `node.item.children.length` 为 0），则跳过后续操作，继续下一次循环。</span><br><span class="hljs-comment">    8. 如果当前节点有子节点，我们使用 `Array.from` 将其转换为一个数组，并对每个子节点进行遍历。对于每个子节点 `item`，我们将其添加到队列 `queue` 中，同时更新它的深度为 `node.depth + 1`。</span><br><span class="hljs-comment">    9. 这样，队列中的节点会逐个出队列，然后将其子节点按照顺序依次加入队列末尾。这就实现了广度优先搜索的效果，节点会按照从上到下、从左到右的顺序进行遍历。</span><br><span class="hljs-comment">    10. 在代码的最后，我们通过 `BFS(document.body.querySelector(&#x27;.root&#x27;))` 调用 `BFS` 函数，并指定根节点为具有类名 &quot;root&quot; 的元素。这将触发从根节点开始的广度优先遍历，输出每一个节点的标签名、类名和深度。</span><br><span class="hljs-comment">    11. 其他：</span><br><span class="hljs-comment">        shift 方法用于从数组的开头移除并返回第一个元素。</span><br><span class="hljs-comment">        它会改变原始数组，将其他元素向前移动一个索引位置。</span><br><span class="hljs-comment">        如果数组为空，则返回 undefined。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        push 方法用于在数组的末尾添加一个或多个元素，并返回该数组的新长度。</span><br><span class="hljs-comment">        它会改变原始数组，在末尾添加一个或多个元素。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        shift和push函数组合可以形成一个简单的队列数据结构</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; root 要遍历的DOM树的根节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BFS</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!root) &#123; <span class="hljs-keyword">return</span> &#125;<br>    <span class="hljs-keyword">let</span> queue = [&#123;<br>        <span class="hljs-attr">item</span>: root,<br>        <span class="hljs-attr">depth</span>: <span class="hljs-number">1</span><br>    &#125;]<br>    <span class="hljs-keyword">while</span>(queue.<span class="hljs-property">length</span>)&#123;<br>        <span class="hljs-keyword">let</span> node = queue.<span class="hljs-title function_">shift</span>()<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;node.item.nodeName&#125;</span>.<span class="hljs-subst">$&#123;node.item.classList&#125;</span>  <span class="hljs-subst">$&#123;node.depth&#125;</span>`</span>)<br>        <br>        <span class="hljs-keyword">if</span>(!node.<span class="hljs-property">item</span>.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(node.<span class="hljs-property">item</span>.<span class="hljs-property">children</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,arr</span>)&#123;<br>            queue.<span class="hljs-title function_">push</span>(&#123;<br>                <span class="hljs-attr">item</span>: item,<br>                <span class="hljs-attr">depth</span>: node.<span class="hljs-property">depth</span> + <span class="hljs-number">1</span><br>            &#125;)<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">BFS</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.root&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">控制台输出结果：<br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> DIV<span class="hljs-selector-class">.root</span>  <span class="hljs-number">1</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> DIV<span class="hljs-selector-class">.container</span>  <span class="hljs-number">2</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> SECTION<span class="hljs-selector-class">.sidebar</span>  <span class="hljs-number">3</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> SECTION<span class="hljs-selector-class">.main</span>  <span class="hljs-number">3</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> UL<span class="hljs-selector-class">.menu</span>  <span class="hljs-number">4</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> ARTICLE<span class="hljs-selector-class">.paragragh</span>  <span class="hljs-number">4</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> P<span class="hljs-selector-class">.note</span>  <span class="hljs-number">4</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> LI.  <span class="hljs-number">5</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> LI.  <span class="hljs-number">5</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> A.  <span class="hljs-number">6</span><br>广度优先(BFS)<span class="hljs-selector-class">.js</span>:<span class="hljs-number">34</span> A.  <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>有关于深度优先遍历和广度优先遍历更多的资料可以阅读：</p><ul><li>深度优先遍历与广度优先遍历</li><li>关于DOM节点的深度优先和广度优先遍历</li><li>深度优先与广度优先方法对DOM树的遍历</li><li>JS 中的广度与深度优先遍历</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
      <tag>深度优先</tag>
      
      <tag>广度优先</tag>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="/blog/2023/07/03/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/blog/2023/07/03/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>需要一个github账号</p><p>电脑需要下载安装node.js、安装并配置git</p><p>需要加速器登录github网站</p><h2 id="二、过程"><a href="#二、过程" class="headerlink" title="二、过程"></a>二、过程</h2><p>1、github创建仓库：</p><p>仓库名：用户名.github.io</p><p>其他自选</p><p>2、开启githubpage</p><p>点击仓库的setting，点击左侧栏的page标签，Sources选择Deploy from a branch</p><p>点击Github Pages进去然后退出来就可以激活了</p><p>3、生成SSL密钥（博主使用的是SSH连接）</p><p>4、目标文件夹下，输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install hexo-cli -g <span class="hljs-regexp">//</span>下载hexo脚手架<br>hexo init 文件名 <span class="hljs-regexp">//</span>新建一个hexo博客项目<br>cd 文件名<br>hexo server <span class="hljs-regexp">//</span>开启服务<br></code></pre></td></tr></table></figure><p>这样就可以访问网页了，比如：<a href="http://localhost:4000/blog/">http://localhost:4000/blog/</a></p><p>5、配置_config.yml文件（参考）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Doing的BLOG</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;BLOG&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;个人博客、多主题、有趣内容、技术、旅行、美食、生活、文化、独特观点、知识、启发、探索世界&#x27;</span><br><span class="hljs-attr">keywords:</span> <br><span class="hljs-attr">author:</span> <span class="hljs-string">Doing</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://koreantion.github.io</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><br><span class="hljs-comment"># Directory</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span><br><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span><br><span class="hljs-attr">skip_render:</span><br><br><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">auto_spacing:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase</span><br><span class="hljs-attr">external_link:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site</span><br>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-comment"># Category &amp; Tag</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-attr">tag_map:</span><br><br><span class="hljs-comment"># Metadata elements</span><br><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Date / Time format</span><br><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><br><span class="hljs-comment">## You can customize the date format as defined in</span><br><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span><br><span class="hljs-comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="hljs-attr">updated_option:</span> <span class="hljs-string">&#x27;mtime&#x27;</span><br><br><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br><br><span class="hljs-comment"># Include / Exclude file(s)</span><br><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="hljs-attr">include:</span><br><span class="hljs-attr">exclude:</span><br><span class="hljs-attr">ignore:</span><br><br><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:用户名/koreantion.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">folder:</span> <span class="hljs-string">blog</span><br></code></pre></td></tr></table></figure><p>5、下载你喜欢的主题，并按照主题去配置。</p><p>6、一键部署</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git<br>hexo g<br></code></pre></td></tr></table></figure><p>7、其他</p><p>因为hexo-deployer-git功能有限，所以自己写了一个脚本文件自动推送仓库：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">On</span> <span class="hljs-keyword">Error</span> <span class="hljs-keyword">Resume</span> <span class="hljs-keyword">Next</span><br><br><span class="hljs-keyword">Set</span> objShell = CreateObject(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)<br>gitRepoPath = <span class="hljs-string">&quot;D:\blog\gitblog\uploadsGit&quot;</span> <span class="hljs-comment">&#x27; 这里替换为你的 Git 仓库路径</span><br>remoteRepoUrl = <span class="hljs-string">&quot;git@github.com:koreantion/koreantion.github.io.git&quot;</span> <span class="hljs-comment">&#x27; 这里替换为你的 GitHub 仓库地址</span><br><br><span class="hljs-comment">&#x27; 切换到仓库目录</span><br>objShell.CurrentDirectory = gitRepoPath<br><br><br><span class="hljs-comment">&#x27; 初始化 Git 仓库（如果尚未初始化）</span><br>RunCommand <span class="hljs-string">&quot;git init&quot;</span><br><br><span class="hljs-comment">&#x27; 将所有文件添加到暂存区</span><br>RunCommand <span class="hljs-string">&quot;git add .&quot;</span><br><br><span class="hljs-comment">&#x27; 提交更改</span><br>RunCommand <span class="hljs-string">&quot;git commit -m &quot;&quot;commit&quot;&quot;&quot;</span><br><br><span class="hljs-comment">&#x27; 添加远程仓库</span><br>RunCommand <span class="hljs-string">&quot;git remote add origin &quot;</span> &amp; remoteRepoUrl<br><br><span class="hljs-comment">&#x27; 推送到远程仓库</span><br>RunCommand <span class="hljs-string">&quot;git push -u origin master -f&quot;</span><br><br><span class="hljs-comment">&#x27; 输出错误信息到控制台</span><br><span class="hljs-keyword">If</span> Err.Number &lt;&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">Then</span><br>    WScript.Echo <span class="hljs-string">&quot;Error: &quot;</span> &amp; Err.Description<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><br><span class="hljs-comment">&#x27; 输出消息到控制台</span><br>WScript.Echo <span class="hljs-string">&quot;init commit connecting push success!&quot;</span><br><br><span class="hljs-comment">&#x27; 释放对象</span><br><span class="hljs-keyword">Set</span> objShell = <span class="hljs-literal">Nothing</span><br><br><span class="hljs-keyword">Sub</span> RunCommand(command)<br>    <span class="hljs-keyword">Set</span> objExec = objShell.Exec(command)<br>    <span class="hljs-keyword">Do</span> <span class="hljs-keyword">While</span> objExec.Status = <span class="hljs-number">0</span><br>        WScript.Sleep <span class="hljs-number">100</span><br>    <span class="hljs-keyword">Loop</span><br>    output = objExec.StdOut.ReadAll()<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/07/02/hello-world/"/>
    <url>/blog/2023/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开始</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
